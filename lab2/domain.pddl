(define (domain puzzlegame)
    (:requirements :strips :equality :adl)
    (:predicates
        (tile ?x)
        (position ?x)
        (at ?t ?x ?y )
        (blank ?x ?y)
        (inc ?p ?pp)
        (dec ?p ?pp)
    )
    (:action move-up
        :parameters (?t ?x ?y ?y1)
        :precondition (and 
            (tile ?t)
            (position ?x) (position ?y) (position ?y1)
            (at ?t ?x ?y)
            (blank ?x ?y1)
            (inc ?y ?y1)
        )
        :effect (and
            (at ?t ?x ?y1)
            (blank ?x ?y)
            (not (at ?t ?x ?y))
            (not (blank ?x ?y1))
        )
    )
    (:action move-down
        :parameters (?t ?x ?y ?y1)
        :precondition (and
            (tile ?t)
            (position ?x) (position ?y) (position ?y1)
            (at ?t ?x ?y)
            (blank ?x ?y1)
            (dec ?y ?y1)
        )
        :effect (and
            (at ?t ?x ?y1)
            (blank ?x ?y)
            (not (at ?t ?x ?y))
            (not (blank ?x ?y1))
        )
    )
    (:action move-left
        :parameters (?t ?x ?y ?x1)
        :precondition (and
            (tile ?t)
            (position ?x) (position ?y) (position ?x1)
            (at ?t ?x ?y)
            (blank ?x1 ?y)
            (dec ?x ?x1)
        )
        :effect (and
            (at ?t ?x1 ?y)
            (blank ?x ?y)
            (not (at ?t ?x ?y))
            (not (blank ?x1 ?y))
        )
    )
    (:action move-right
        :parameters (?t ?x ?y ?x1)
        :precondition (and
            (tile ?t)
            (position ?x) (position ?y) (position ?x1)
            (at ?t ?x ?y)
            (blank ?x1 ?y)
            (inc ?x ?x1)
        )
        :effect (and
            (at ?t ?x1 ?y)
            (blank ?x ?y)
            (not (at ?t ?x ?y))
            (not (blank ?x1 ?y))
        )
    )
)